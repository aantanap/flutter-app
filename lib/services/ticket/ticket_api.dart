// ignore_for_file: non_constant_identifier_names, unnecessary_brace_in_string_interps

import 'dart:convert';
import 'package:rems/model/data/data_model.dart';
import 'package:rems/model/ticket/ticket_model.dart';
import 'package:rems/services/main_service.dart';
import 'package:rems/services/pref_data.dart';
// ignore: depend_on_referenced_packages
import 'package:http/http.dart' as http;

class TicketAPI {
  Future<CategoryTicket> GetCategoryTicket(String userid, String type) async {
    String token = await PrefData.getToken();
    CategoryTicket categoryTicket = CategoryTicket();
    final response = await http.get(
      Uri.parse(
          '${MyBaseServiceManager.getBaseApiUrl()}api/Ticket/GetCategoryTicket?userid=$userid&type=$type'),
      headers: {
        'Authorization': 'Bearer $token',
      },
    );
    String data = response.body.toString();
    categoryTicket = CategoryTicket.fromJson(json.decode(data));
    return categoryTicket;
  }

  Future<TechGroupTicket> GetTechGroupTicket(String type) async {
    String token = await PrefData.getToken();
    TechGroupTicket techGroupTicket = TechGroupTicket();
    final response = await http.get(
      Uri.parse(
          '${MyBaseServiceManager.getBaseApiUrl()}api/Ticket/GetTechGroupTicket?type=$type'),
      headers: {
        'Authorization': 'Bearer $token',
      },
    );
    String data = response.body.toString();
    techGroupTicket = TechGroupTicket.fromJson(json.decode(data));
    return techGroupTicket;
  }

  Future<StatusTicket> GetStatusTicket(String type) async {
    String token = await PrefData.getToken();
    StatusTicket statusTicket = StatusTicket();
    final response = await http.get(
      Uri.parse(
          '${MyBaseServiceManager.getBaseApiUrl()}api/Ticket/GetStatusTicket?type=$type'),
      headers: {
        'Authorization': 'Bearer $token',
      },
    );
    String data = response.body.toString();
    statusTicket = StatusTicket.fromJson(json.decode(data));
    return statusTicket;
  }

  Future<List<RequestLists>> GetRequestLists() async {
    String token = await PrefData.getToken();
    List<RequestLists> requestLists = [];
    String type = "all";
    String filter = "all";
    int page = 1;
    int length = 20;
    final response = await http.get(
      Uri.parse(
          '${MyBaseServiceManager.getBaseApiUrl()}api/Ticket/GetRequestLists?type=$type&filter=$filter&page=$page&Length=$length'),
      headers: {
        'Authorization': 'Bearer $token',
      },
    );
    var jsonlist = json.decode(response.body.toString()) as List;
    // ignore: avoid_function_literals_in_foreach_calls
    jsonlist.forEach((e) {
      requestLists.add(RequestLists.fromJson(e));
    });
    return requestLists;
  }

  Future<resData> saveIncidentTicket(
      SaveIncidentTicket saveIncidentTicket) async {
    String resultBody = "";
    String resultCode = "";
    String token = await PrefData.getToken();

    final response = await http.post(
        Uri.parse(
            '${MyBaseServiceManager.getBaseApiUrl()}api/Ticket/SaveIncidentTicket/'),
        headers: {
          'Authorization': 'Bearer ${token}',
          "Content-Type": "application/json",
        },
        body: jsonEncode(saveIncidentTicket.toJson()));

    resData data = resData();

    resultBody = response.body.toString();
    resultCode = response.statusCode.toString();
    data.statusCode = resultCode;
    data.data = resultBody;

    return data;
  }

  Future<resData> saveRequestTicket(SaveRequestTicket saveRequestTicket) async {
    String resultBody = "";
    String resultCode = "";
    String token = await PrefData.getToken();

    final response = await http.post(
        Uri.parse(
            '${MyBaseServiceManager.getBaseApiUrl()}api/Ticket/SaveRequestTicket/'),
        headers: {
          'Authorization': 'Bearer ${token}',
          "Content-Type": "application/json",
        },
        body: jsonEncode(saveRequestTicket.toJson()));

    resData data = resData();

    resultBody = response.body.toString();
    resultCode = response.statusCode.toString();
    data.statusCode = resultCode;
    data.data = resultBody;

    return data;
  }

  Future<RequestDataByID> getRequestData(int ticketID) async {
    String token = await PrefData.getToken();
    RequestDataByID requestDataByID = RequestDataByID();
    final response = await http.get(
      Uri.parse(
          '${MyBaseServiceManager.getBaseApiUrl()}api/Ticket/GetRequestData?TicketID=$ticketID'),
      headers: {
        'Authorization': 'Bearer $token',
      },
    );
    String data = response.body.toString();
    requestDataByID = RequestDataByID.fromJson(json.decode(data));
    return requestDataByID;
  }

  Future<Autogenerated> GetAutogenerated(String userid, String type) async {
    String token = await PrefData.getToken();
    Autogenerated autogenerated = Autogenerated();
    final response = await http.get(
      Uri.parse(
          '${MyBaseServiceManager.getBaseApiUrl()}api/Ticket/GetCategoryTicket?userid$userid&type=$type'),
      headers: {
        'Authorization': 'Bearer $token',
      },
    );
    String data = response.body.toString();
    autogenerated = Autogenerated.fromJson(json.decode(data));
    return autogenerated;
  }
}
